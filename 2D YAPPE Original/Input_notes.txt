These runs were performed on June 28, 2016 and are for convergence testing the current version of YAPPE for runs which are close to what we will have when propagating 800 nm light through the water cell. 

In the tests I vary:

run 1: nothing
run 2: double xi grid resolution
run 3: halve xi grid resolution
run 4: double xi axis length
run 5: halve xi axis length
run 6: doulbe r grid resolution
run 7: halve r grid resolution
run 8: double r axis length
run 9: halve r axis length
run 10: turn off frequency damping to frequencies near edge of grid

Note that when doubling or halving axis length I also double or halve the number of points to keep the grid resolution fixed.

Results:

Overall looks quite converged. Halving the xi period creates some high frequency noise on the signal which is apparent when looking at the on-axis temporal lineout, but otherwise follows run1. Halving the the radial resolution results in an unconverged run. Doubling the radial resolution doesn't change anything except the peak intensity at collapse is higher... further propagation nicely follows run 1. All other changes did nothing.

Lessons: 

Keep a close eye on the radial resolution. This may be the one convergence run to do with any runs I do using roughly these parameters. Also, if the temporal pulse envelope looks like it has high frequency crap on it, likely need to extend the xi axis length. 

Below I have a copy of the input deck whose values I perturb around in runs 1-10.

    %grid parameters
    s.input.xi_extent = 600*1e-15; %axial window length in seconds
    s.input.xi_pts = 300; %number of pts along axial direction
    s.input.r_extent = .2; %radial window length in cm
    s.input.r_pts = 600; %number of pts along radial direction    
    s.input.z_extent = 2; %extent of propagation in cm

    %load E-field options
    s.input.lambda_vac = 800e-7; %vacuum central wavelength in cm
    s.input.infield.type = 'gauss'; %choose between 'gauss' and 'custom'    
    s.input.infield.path = '~/matlab_scripts/hankel_FILA/E_in_example.mat'; %location of custom field    
    s.input.infield.waist = 40e-4; %gaussian waist in cm (used in gauss)
    s.input.infield.tfwhm = 40e-15; %intensity fwhm in s (used in gauss)
    s.input.infield.energ = .5e-6; %beam energy in J (used in gauss)
    s.input.infield.f = inf; %focusing length in cm (used in gauss)

    %choose propagation medium
    s.input.medium = 'water';
    
    %specify output path and output period
    s.input.outpath = '~/YAPPE_outputs/Kolesik Water Simulations3/run 1/'; %output path
    s.input.outperiod = .05; %output period in cm
    
    %toggle dispersion, plasma and n2 propagation modules
    s.input.dispersion = 1;
    s.input.plasma = 1;
    s.input.n2 = 1;
    
    %solution tolerances for ODE calls
    s.input.RelTol = 1e-3;
    s.input.AbsTol = 1e-6;
    
    %absorbing boundaries
    s.input.freqbd = 1; %toggle the absorbing frequency boundary on and off
    s.input.freqbd_length = .005; %set absorption length in cm
    s.input.freqbd_width = .1; %fractional value of boundary width (boundary width/total bandwidth)
